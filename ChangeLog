[2009-02-05] ADDED: libAudio the audio loading library.[2009-09-01] Created folder Experimental for new experimental branch of libAudio
[2009-09-01] Oops, didn't want to create this like that
[2009-09-01] Filling in Experimental folder with new branch.
[2009-09-01] Oops again, this is difficult to get right when the files you wish to commit aren't under version control according to your client!
[2009-09-01] Filling in Experimental branch.
[2009-09-01] UPDATED: libAudio is now basically a commercial product, only debugging of the loadIT and loadWMA modules needs to continue, other than that, I could release this library.
[2009-09-01] ADDED: libAudio source-code into the version control tree
[2010-05-14] UPDATE: Adding pre-go-to-Linux changes into the repository before re-grabbing everything from the FTP server to merge in
[2010-05-14] UPDATE: Moving the libAudio Experimental branch out of the possible C/O tree for libAudio
[2010-05-14] UPDATE: post-go-to-Linux updates, all things rebuild fine.
[2010-05-29] UPDATE: Fixed a major bug in the revamped Ogg-Vorbis loader
[2010-06-27] ADDED: Spectrometer, a spectral analysis engine and program for libAudio that demonstrates the new switch and the power of libAudio wrt how the analysis engine is plugged into the playback routines seemlessly
[2010-06-27] UPDATE: Fixed plenty of stability issues and have made libAudio capable of having it's internal playback engine switched off via a flag
[2010-06-27] UPDATE: Tree clean-up, removed all .dll, .exp and .lib files that are generated by the build phase of the project as these should not be in SVN.
[2010-10-17] UPDATED: Moved libAudio to using wavpack as a dll rather than static library
[2010-10-17] UPDATED: fixed libAudio up to build on my desktop. This process also needs reviewing for Windows as it is fatally flawed in a number of ways, just as the dependency repository has flaws
[2010-10-20] DELETED: All unnecessary .user files which should never have been committed to repository
[2010-11-05] UPDATED: Removed the dependency on hard-coded paths in the .vcproj for Spectrometer - It now depends on the GTK_INC and GTK_LIB environment variables and them being included into the INCLUDE and LIB environment variables
[2010-11-05] UPDATED: Updated zlib1.dll
[2010-11-05] UPDATED: Removed the dependency on hard-coded paths in the .vcproj for Spectrometer - It now depends on the GTK_INC and GTK_LIB environment variables and them being included into the INCLUDE and LIB environment variables (Commit failed last time)
[2010-11-12] UPDATED: loadIT.cpp/mixIT.cpp now work (kinda) for at least to_come.it - big improvement as at least we get sounds kinda like what we're looking for out the engine even if they're not yet A completely correct or glitch-less as we'd like them to be..
[2010-11-12] UPDATED: Fixed saveM4A.cpp to build on Linux while recovery of it's dependancy's modified source code is completed
[2010-11-12] UPDATED: Added __FASTCALL__ in preparation for getting the Impulse Tracker engine working on Linux as far as it works on Windows
[2010-11-12] UPDATED: Fixed loadIT.cpp, ImpulseTracker.h and added entries to Makefile so that loadIT.cpp builds on Linux
[2010-11-12] UPDATED: Converted the line endings of saveAudio.cpp, saveM4A.cpp and saveFLAC.cpp to Unix endings
[2010-11-12] UPDATED: changed std_mix.h to use the cross-platform calling convention keyword defintions
[2010-11-12] UPDATED: changed mixIT.cpp to use the cross-platform calling convention keyword defintions
[2010-11-12] UPDATED: The mixIT module engine now nearly completely works. Remaining artefacts centre around note speeds, mixer output (notes are often not output correctly) and sample configurations.
[2010-11-13] UPDATED: Final version of the current Impulse Tracker mixer. It works, mostly, but I am going to scrap it and write my own completely from scratch using only the bare minimum from loadIT.cpp and making sure /none/ if it is incorrect or will crash in any way. The only bits that I will transfer from this version will be in my loader module and the gist of how to mix the resulting state into a working sound buffer. I tip my hat to Oliver Lapicque for such a good mixer, though.
[2010-11-13] UPDATED: Disabled the Impulse Tracker mixer and loader for Linux
[2010-11-14] UPDATED: __NO_IT__ defined for use in disabling Impulse Tracker code on all platforms. Windows currently has this due to the discontinuation of development of the IT mixing engine in preference for writing my own starting with the LCD - MOD.
[2010-11-14] ADDED: the bare-bones of a MOD loader which correctly loads any MOD file provided it's not a 15 sample ProTracker MOD.
[2010-11-14] ADDED: Missing file ProTracker.h which defines the structures used to read a MOD file and how to store it in memory
[2010-11-14] UPDATED: Added compilation support for MOD in Linux and defined __NO_IT__ in Linux
[2010-11-14] UPDATED: Made loadMOD.cpp compatible with gcc - works flawlessly on Linux and loads more than 100 tunes of various flavours of MOD without issue
[2010-11-14] UPDATED: loadMOD.cpp now fully correctly memory manges itself
[2010-11-14] UPDATED: Added calls to create and destroy the mixer from the appropriate loadMOD.cpp routines
[2010-11-14] ADDED: Raw beginnings of a mixer for MOD files
[2010-11-14] UPDATED: Fixed up moduleMixer.cpp to work on/with Linux/GCC and added the module mixer to the Makefile
[2010-11-14] UPDATED: moduleMixer is now ready for having it's innards programmed now it's skin is complete
[2010-11-14] UPDATED: loadMOD is now connected up to the only necessary mixer functions that have to be external to the mixer
[2010-11-17] UPDATED: Fleshed the new moduleMixer out considerably, though this is now stuck with trying to fix some playback bugs resulting from some part of the chn->Increment calculation being wrong
[2010-11-17] UPDATED: Removed the Automatic Gain Control preamp table from mixIT.cpp and fixed another of the bugs in it's code
[2010-11-17] UPDATED: Refined the mixer code some more - it still plays notes incorrectly every so often and is missing most of the Amiga effects, but I will start adding the effects as soon as note playing works fully correctly and without note-end bugs
[2010-11-17] UPDATED: Fixed abs() not being defined on Linux
[2010-11-17] UPDATED: Done a version of muldiv() that should compile on Linux
[2010-11-17] UPDATED: Removed some spurious code from moduleMixer.cpp so that it now builds on Linux
[2010-11-17] UPDATED: Fixed moduleMixer.cpp to work under Linux
[2010-11-17] UPDATED: moduleMixer works on Linux and produces the same results as on Windows
[2010-11-17] UPDATED: Added a new effect (VolumeSlide) and cleaned up the levels generation code
[2010-11-18] UPDATED: Added theoretically correct PortamentoUp/PortamentoDown functionality to the mixer
[2010-11-18] UPDATED: Added TonePortamento. Portamento Up/Down worked as per last commit - no problems found
[2010-11-18] UPDATED: added TonePortamento/VolumeSlide all-in-one effect
[2010-11-18] UPDATED: Tried fixing TonePortamento as it doesn't work completely correctly
[2010-11-18] UPDATED: Fix attempt number 2
[2010-11-18] UPDATED: Fix try number 3
[2010-11-18] UPDATED: Finally, a working fix! ^_^
[2010-11-19] UPDATED: Initial commit of Tremolo handling - needs testing and Random Wave mode needs implementing still
[2010-11-19] UPDATED: Added Vibrato support
[2010-11-19] UPDATED: Added the final waveform table, but noting that the table is subject to design change
[2010-11-19] UPDATED: Added Vibrato/Volume combo command
[2010-11-20] UPDATED: Added the first 3 extended effects
[2010-11-20] UPDATED: Added two more extended commands and corrected the CMDEX_FINETUNE command
[2010-11-20] UPDATED: Added CMDEX_GLISSANDO, CMDEX_FINEVOLUP and CMDEX_FINEVOLDOWN
[2010-11-21] UPDATED: Fixed the clipping in ReadNote()
[2010-11-21] UPDATED: Fully inlined the period to frequency conversion
[2010-11-21] UPDATED: Fixed the Vibrato flag not getting cleared
[2010-11-21] UPDATED: Implemented Arpeggio
[2010-11-21] UPDATED: Fixed an error in CMD_OFFSET and implemented CMDEX_RETRIGER
[2010-11-22] UPDATED: Implemented the CMDEX_NOTECUT effect
[2010-11-22] UPDATED: Implemented sample decaying
[2010-11-22] UPDATED: Added equivilent Assembly language code for EndChannelOut() for Linux
[2010-11-22] UPDATED: Added a catch-me to the while loop in EndChannelOut() which will prevent buffer overruns
[2010-11-22] UPDATED: Made sure to save the changed Last*Sample values in EndChannelOut()
[2010-11-22] UPDATED: Fixed the lack of incrementation of buff in EndChannelOut()
[2010-11-22] UPDATED: Fixed a bug which was causing a Segmentation Fault on Linux
[2010-11-22] UPDATED: Improved how EndChannelOut() works with the mixer state
[2010-11-22] UPDATED: Added looped sample decay
[2010-11-22] UPDATED: Changed the decay code to be less quick over the decay
[2010-11-22] UPDATED: Made sample decaying effect all notes, not just ones with loops and made it stop decaying once the decay has finished if the new note is retriggered
[2010-11-22] UPDATED: Fixed an typo in the name of the constant for CMDEX_RETRIGER
[2010-11-22] UPDATED: Improved the decay routine's call criteria
[2010-11-22] UPDATED: Completely rewritten the DoDecay() function so that it now acts as if it were there Mono8BitRampMix mix interface with the ramps running the volume to zero. This should work better as a click prevention mechanism.
[2010-11-23] UPDATED: Yet another try at improving decay handling
[2010-11-23] UPDATED: Try again and hope it works.. ramping now works slightly differently again
[2010-11-23] UPDATED: Modified how volume ramping is done in the decay function
[2010-11-23] UPDATED: Implemented sample loop-around in the decay engine
[2010-11-23] UPDATED: Modified again how volume ramping is done in the decay function
[2010-11-23] UPDATED: Limited decaying back to just looped samples
[2010-11-24] UPDATED: Introduced some code to completely restore the Pos variable in the decay function rather than just partially restore it
[2010-11-24] UPDATED: Fixed all the string conversion deprecation warning potentials that GCC could produce on using the library header
[2010-12-21] UPDATED: Made libAudio build more cleanly and more compactly under Linux if the GCC used supports it
[2010-12-21] UPDATED: Made libAudio build more cleanly and more compactly under Linux if the GCC used supports it
