name: C++ CI

on:
  push:
  schedule:
    - cron: "0 0 1 * *"

jobs:
  build-linux:
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        compiler:
          - 'clang-5.0'
          - 'clang-6.0'
          - 'clang-7'
          - 'clang-8'
          - 'clang-9'
          - 'gcc-5'
          - 'gcc-6'
          - 'gcc-7'
          - 'gcc-8'
          - 'gcc-9'
        coverage: [false, true]
      fail-fast: false
    steps:
      - name: Runtime environment
        shell: bash
        env:
          WORKSPACE: ${{ github.workspace }}
        run: |
          echo ::set-env name=PATH::"$HOME/.local/bin:$PATH"
          echo ::set-env name=GITHUB_WORKSPACE::"`pwd`"
      - name: Coverage environment
        env:
          COVERAGE: ${{ matrix.coverage }}
        run: |
          echo "Coverage enabled for build? ${{ matrix.coverage }}"
          echo ::set-env name=COVERAGE::$([ $COVERAGE == "true" ] && echo -n 1 || echo -n 0)
      - name: Setup GCC
        if: startsWith(matrix.compiler, 'gcc')
        shell: bash
        run: |
          CXX=${CC/#gcc/g++}
          sudo apt-add-repository ppa:ubuntu-toolchain-r/test
          sudo apt-get update
          sudo apt-get install $CC $CXX
          echo ::set-env name=CC::$CC
          echo ::set-env name=CXX::$CXX
          [ $COVERAGE -ne 0 ] && echo ::set-env name=GCOV::${CC/#gcc/gcov} || true
        env:
          CC: ${{ matrix.compiler }}
      - name: Setup Clang
        if: startsWith(matrix.compiler, 'clang')
        shell: bash
        run: |
          sudo apt-add-repository "deb https://apt.llvm.org/bionic/ llvm-toolchain-bionic${CC/#clang/} main"
          sudo apt-get update
          CXX=${CC/#clang/clang++}
          sudo apt-get install $CC $CXX
          echo ::set-env name=CC::$CC
          echo ::set-env name=CXX::$CXX
          [ $COVERAGE -ne 0 ] && echo ::set-env name=GCOV::"/usr/lib/${CC/#clang/llvm}/bin/llvm-cov gcov" || true
        env:
          CC: ${{ matrix.compiler }}
      - name: Checkout libAudio
        uses: actions/checkout@v2
        with:
          lfs: true
      - name: Checkout public deps
        shell: bash
        run: |
          git submodule init deps/substrate
          git submodule update --depth 1
      - name: Compute libmp4v2 ref
        run: echo ::set-env name=MP4V2_REF::$(git submodule status | grep deps/mp4v2 | awk '{print $1}' | tr -d '-' )
      - name: Checkout libmp4v2
        uses: actions/checkout@v2
        with:
          repository: DX-MON/mp4v2
          token: ${{ secrets.MP4V2_TOKEN }}
          path: deps/mp4v2
          ref: ${{ env.MP4V2_REF }}
          lfs: true
      - name: Setup Meson + Ninja
        shell: bash
        run: |
          wget https://github.com/ninja-build/ninja/releases/download/v1.9.0/ninja-linux.zip
          sudo pip3 install --upgrade pip setuptools wheel
          pip3 install --user meson
          unzip ninja-linux.zip -d ~/.local/bin
          rm ninja-linux.zip
        working-directory: ${{ runner.temp }}
      - name: Version tools
        shell: bash
        run: |
          $CC --version
          $CXX --version
          [ $COVERAGE -ne 0 ] && $GCOV --version || true
          meson --version
          ninja --version
      - name: Install dependencies
        shell: bash
        run: |
          sudo apt-get install libopenal-dev libogg-dev libvorbis-dev libopus-dev libopusfile-dev \
            libflac-dev libwavpack-dev libmpcdec-dev libfaac-dev libfaad-dev libmad0-dev libid3tag0-dev
#            libgl-dev qtbase5-dev
      - name: Install libmp4v2
        shell: bash
        run: |
          meson build --prefix=/usr
          ninja -C build
          sudo $HOME/.local/bin/ninja -C build install
        working-directory: ${{ env.GITHUB_WORKSPACE }}/deps/mp4v2
      - name: Configure
        run: meson build --prefix=$HOME/.local -Db_coverage=${{ matrix.coverage }}
      - name: Build
        run: ninja
        working-directory: ${{ env.GITHUB_WORKSPACE }}/build
      - name: Test
        run: ninja test
        working-directory: ${{ env.GITHUB_WORKSPACE }}/build
      - name: Install
        run: ninja install
        working-directory: ${{ env.GITHUB_WORKSPACE }}/build
      - name: Codecov
        if: success() && matrix.coverage
        run: bash <(curl -s https://codecov.io/bash) -x "$GCOV";

  build-windows:
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [windows-2019]
        arch: ['amd64', 'x86']
        coverage: [false]
      fail-fast: false
    env:
      CC: cl.exe
      CXX: cl.exe
      LD: link.exe
    steps:
      - name: Runtime environment
        env:
          ARCH: ${{ matrix.arch }}
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" %ARCH%
          echo ::set-env name=CommandPromptType::%CommandPromptType%
          echo ::set-env name=DevEnvDir::"%DevEnvDir%"
          echo ::set-env name=ExtensionSdkDir::"%ExtensionSdkDir%"
          echo ::set-env name=INCLUDE::"%HOME%\deps\include;%INCLUDE%"
          echo ::set-env name=LIB::"%HOME%\deps\lib;%LIB%"
          echo ::set-env name=LIBPATH::"%LIBPATH%"
          echo ::set-env name=Platform::"%Platform%"
          echo ::set-env name=UCRTVersion::"%UCRTVersion%"
          echo ::set-env name=UniversalCRTSdkDir::"%UniversalCRTSdkDir%"
          echo ::set-env name=VCINSTALLDIR::"%VCINSTALLDIR%"
          echo ::set-env name=VCToolsInstallDir::"%VCToolsInstallDir%"
          echo ::set-env name=VCToolsRedistDir::"%VCToolsRedistDir%"
          echo ::set-env name=VCToolsVersion::"%VCToolsVersion%"
          echo ::set-env name=VisualStudioVersion::"%VisualStudioVersion%"
          echo ::set-env name=VSINSTALLDIR::"%VSINSTALLDIR%"
          echo ::set-env name=WindowsLibPath::"%WindowsLibPath%"
          echo ::set-env name=WindowsSdkBinPath::"%WindowsSdkBinPath%"
          echo ::set-env name=WindowsSdkDir::"%WindowsSdkDir%"
          echo ::set-env name=WindowsSDKLibVersion::"%WindowsSDKLibVersion%"
          echo ::set-env name=WindowsSdkVerBinPath::"%WindowsSdkVerBinPath%"
          echo ::set-env name=WindowsSDKVersion::"%WindowsSDKVersion%"
          echo ::set-env name=WindowsSDK_ExecutablePath_x64::"%WindowsSDK_ExecutablePath_x64%"
          echo ::set-env name=WindowsSDK_ExecutablePath_x86::"%WindowsSDK_ExecutablePath_x86%"
          echo ::set-env name=CPU_COUNT::%NUMBER_OF_PROCESSORS%
          mkdir %HOME%\deps
          echo ::set-env name=PKG_CONFIG_PATH::%HOME%\deps\lib\pkgconfig
      - name: Coverage environment
        env:
          COVERAGE: ${{ matrix.coverage }}
        shell: bash
        run: |
          echo "Coverage enabled for build? ${{ matrix.coverage }}"
          echo ::set-env name=COVERAGE::$([ $COVERAGE == "true" ] && echo -n 1 || echo -n 0)
      - name: Checkout libAudio
        uses: actions/checkout@v2
        with:
          lfs: true
      - name: Checkout public deps
        shell: bash
        run: |
          git submodule init deps/substrate deps/ogg deps/vorbis deps/opus deps/opusfile
          git submodule update --depth 1
      - name: Compute libmp4v2 ref
        run: echo ::set-env name=MP4V2_REF::$(git submodule status | grep deps/mp4v2 | awk '{print $1}' | tr -d '-' )
      - name: Checkout libmp4v2
        uses: actions/checkout@v2
        with:
          repository: DX-MON/mp4v2
          token: ${{ secrets.MP4V2_TOKEN }}
          path: deps/mp4v2
          ref: ${{ env.MP4V2_REF }}
          lfs: true
      - name: Setup Meson + Ninja
        shell: bash
        run: |
          curl -L1O https://github.com/ninja-build/ninja/releases/download/v1.9.0/ninja-win.zip
          python -m pip install --upgrade pip setuptools wheel
          pip3 install meson
          unzip ninja-win.zip -d /c/ProgramData/Chocolatey/bin
          rm ninja-win.zip
        working-directory: ${{ runner.temp }}
      - name: Version tools
        shell: bash
        run: |
          $CC || true
          $LD || true
          [ $COVERAGE -ne 0 ] && $GCOV --version || true
          meson --version
          ninja --version
      - name: Install dependencies
        shell: bash
        run: |
          git clone --depth 1 --no-tags https://github.com/git-for-windows/git-sdk-64
          cd git-sdk-64
          cp -a etc/pacman.{d,conf} /etc
          cp -a usr/bin/pac* usr/bin/aclocal* usr/bin/auto* usr/bin/libtool* usr/bin/msys-ltdl* \
            usr/bin/make.exe usr/bin/m4.exe /usr/bin
          cp -a usr/share/auto* usr/share/aclocal* usr/share/libtool usr/share/pac* /usr/share
          cp -a usr/bin/as.exe usr/bin/g{cc,++,cc-*}.exe usr/bin/ld{,.bfd}.exe usr/bin/x86_64-pc-msys-* \
            usr/bin/cpp.exe usr/bin/msys-mpc-*.dll usr/bin/msys-isl-*.dll /usr/bin
          cp -a usr/lib/gcc usr/lib/{crt0.o,libmsys-2.0.a} usr/lib/w32api /usr/lib
          cp -a usr/include /usr
        working-directory: ${{ runner.temp }}
      - name: Install libogg
        shell: bash
        run: |
          libtoolize -icf
          aclocal -I m4
          autoheader
          automake -ac
          autoconf
          CC=cl LD=link AR=ar CFLAGS="-O2 -Ob2 -Oi" ./configure --prefix=$HOME/deps
          make -j $CPU_COUNT
          make install
        working-directory: ${{ github.workspace }}/deps/ogg
      - name: Install libvorbis
        shell: bash
        run: |
          libtoolize -icf
          aclocal -I .
          autoheader
          automake -ac
          autoconf
          CC=cl LD=link AR=ar CFLAGS="-O2 -Ob2 -Oi" ./configure --prefix=$HOME/deps
          make -j $CPU_COUNT
          make install
        working-directory: ${{ github.workspace }}/deps/vorbis
      - name: Install libopus
        shell: bash
        run: |
          mkdir -p build
          cd build
          cmake .. -DCMAKE_INSTALL_PREFIX:PATH=$HOME/deps -DCMAKE_BUILD_TYPE:STRING=Release \
            -DBUILD_SHARED_LIBS:BOOL=ON -G Ninja
          ninja
          ninja install
        working-directory: ${{ github.workspace }}/deps/opus
      - name: Install libopusfile
        shell: bash
        run: |
          libtoolize -icf
          aclocal -I m4
          autoheader
          automake -ac
          autoconf
          CC=cl LD=link AR=ar CFLAGS="-O2 -Ob2 -Oi" ./configure --prefix=$HOME/deps --disable-examples
          make -j $CPU_COUNT
          make install
        working-directory: ${{ github.workspace }}/deps/opus
      - name: Install libflac
        shell: bash
        run: |
          mkdir -p build
          cd build
          cmake .. -DCMAKE_INSTALL_PREFIX:PATH=$HOME/deps -DCMAKE_BUILD_TYPE:STRING=Release \
            -DBUILD_SHARED_LIBS:BOOL=ON -G Ninja
          ninja
          ninja install
          mv $HOME/deps/{share/pkgconfig/flac*.pc,lib/pkgconfig}
          rm -rf $HOME/deps/share
        working-directory: ${{ github.workspace }}/deps/flac
      - name: Install WavPack
        shell: bash
        run: |
          mkdir -p build
          cd build
          cmake .. -DCMAKE_INSTALL_PREFIX:PATH=$HOME/deps -DCMAKE_BUILD_TYPE:STRING=Release \
            -DWAVPACK_BUILD_WINAMP_PLUGIN:BOOL=OFF -DBUILD_SHARED_LIBS:BOOL=ON \
            -DWAVPACK_BUILD_COOLEDIT_PLUGIN:BOOL=OFF -G Ninja
          ninja
          ninja install
        working-directory: ${{ github.workspace }}/deps/WavPack
      - name: Install libcuefile
        shell: bash
        run: |
          mkdir -p build
          cd build
          CFLAGS='-D_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES=1 -D_CRT_NONSTDC_NO_WARNINGS=1 \
            -D_CRT_SECURE_NO_WARNINGS=1'  cmake .. -DCMAKE_INSTALL_PREFIX:PATH=$HOME/deps \
            -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -G Ninja
          ninja
          ninja install
        working-directory: ${{ github.workspace }}/deps/libcuefile
      - name: Install libreplaygain
        shell: bash
        run: |
          mkdir -p build
          cd build
          cmake .. -DCMAKE_INSTALL_PREFIX:PATH=$HOME/deps -DCMAKE_BUILD_TYPE:STRING=Release \
            -DBUILD_SHARED_LIBS:BOOL=ON -G Ninja
          ninja
          ninja install
        working-directory: ${{ github.workspace }}/deps/libreplaygain
      - name: Install MusePack
        shell: bash
        run: |
          meson build --prefix=$HOME/deps
          ninja -C build
          ninja -C build install
        working-directory: ${{ github.workspace }}/deps/libmpc
      - name: Install faac
        shell: bash
        run: |
          ./bootstrap
          CC=cl LD=link AR=ar CFLAGS="-O2 -Ob2 -Oi -D_USE_MATH_DEFINES \
            -I${{ github.workspace }}/deps/faac/project/msvc" ./configure
            --prefix=$HOME/deps --disable-static
          make -j $CPU_COUNT
          make install
          cp $HOME/deps/lib/faac.{dll.,}lib
        working-directory: ${{ github.workspace }}/deps/faac
      - name: Install faad2
        shell: bash
        run: |
          ./bootstrap
          CC=cl LD=link AR=ar CFLAGS="-O2 -Ob2 -Oi -D_USE_MATH_DEFINES \
            -I${{ github.workspace }}/deps/faad2/include" ./configure
            --prefix=$HOME/deps --disable-static
          make -j $CPU_COUNT
          make install
          cp $HOME/deps/lib/faad.{dll.,}lib
        working-directory: ${{ github.workspace }}/deps/faad2
      - name: Install libmp4v2
        shell: bash
        run: |
          meson build --prefix=$HOME/deps --warnlevel=1
          ninja -C build
          ninja -C build install
        working-directory: ${{ github.workspace }}/deps/mp4v2
      - name: Install libmad
        shell: bash
        run: |
          touch NEWS AUTHORS ChangeLog
          WANT_AUTOMAKE=latest libtoolize -icf
          WANT_AUTOMAKE=latest aclocal -I . -I m4
          autoheader
          WANT_AUTOMAKE=latest automake -ac
          autoconf
          CC=cl LD=link AR=ar CFLAGS="-O2 -Ob2 -Oi -I${{ github.workspace }}/deps/libmad/msvc++" \
            LDFLAGS="-no-undefined" ./configure --prefix=$HOME/deps --disable-static
          make -j $CPU_COUNT
          make install
          cp $HOME/deps/lib/mad{.dll,}.lib
        working-directory: ${{ github.workspace }}/deps/libmad
      - name: Install zlib
        shell: bash
        run: |
          nmake -f win32/Makefile.msc
          cp zlib1.dll $HOME/deps/bin
          cp zdll.lib $HOME/deps/lib
          cp $HOME/deps/lib/z{dll,}.lib
          cp zconf.h zlib.h $HOME/deps/include
        working-directory: ${{ github.workspace }}/deps/zlib
      - name: Install libid3tag
        shell: bash
        run: |
          touch NEWS AUTHORS ChangeLog
          WANT_AUTOMAKE=latest libtoolize -icf
          WANT_AUTOMAKE=latest aclocal -I . -I m4
          autoheader
          WANT_AUTOMAKE=latest automake -ac
          autoconf
          CC=cl LD=link AR=ar CFLAGS="-O2 -Ob2 -Oi -I${{ github.workspace }}/deps/libid3tag/msvc++" \
            LDFLAGS="-no-undefined -MD" ./configure --prefix=$HOME/deps --disable-shared --enable-static
          make -j $CPU_COUNT
          make install
        working-directory: ${{ github.workspace }}/deps/libid3tag
      - name: Configure
        shell: cmd
        run: |
          cl
          meson build --prefix=%HOME%/.local -Db_coverage=${{ matrix.coverage }} -Dcpp_link_args="-lz"
      - name: Build
        run: ninja
        working-directory: ${{ github.workspace }}/build
      - name: Test
        run: ninja test
        working-directory: ${{ github.workspace }}/build
      - name: Install
        run: ninja install
        working-directory: ${{ github.workspace }}/build
