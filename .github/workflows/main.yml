name: C++ CI

on:
  push:
  schedule:
    - cron: "0 0 1 * *"

jobs:
  build-linux:
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        compiler:
#          - 'clang-5.0'
#          - 'clang-6.0'
#          - 'clang-7'
#          - 'clang-8'
#          - 'clang-9'
          - 'gcc-5'
          - 'gcc-6'
          - 'gcc-7'
          - 'gcc-8'
          - 'gcc-9'
        coverage: [false]
    steps:
 #     - name: Setup Python
 #       uses: actions/setup-python@v1
 #       with:
 #         python-version: 3.6.9
      - name: Runtime environment
        shell: bash
        run: echo ::set-env name=PATH::"$HOME/.local/bin:$PATH"
      - name: Coverage environment
        env:
          COVERAGE: ${{ matrix.coverage }}
        run: |
          echo "Coverage enabled for build? ${{ matrix.coverage }}"
          echo ::set-env name=COVERAGE::$([ $COVERAGE == "true" ] && echo -n 1 || echo -n 0)
      - name: Setup GCC
        if: startsWith(matrix.compiler, 'gcc')
        shell: bash
        run: |
          CXX=${CC/#gcc/g++}
          sudo apt-add-repository ppa:ubuntu-toolchain-r/test
          sudo apt-get update
          sudo apt-get install $CC $CXX
          echo ::set-env name=CC::$CC
          echo ::set-env name=CXX::$CXX
          [ $COVERAGE -ne 0 ] && echo ::set-env name=GCOV::${CC/#gcc/gcov} || true
        env:
          CC: ${{ matrix.compiler }}
      - name: Setup Clang
        if: startsWith(matrix.compiler, 'clang')
        shell: bash
        run: |
          sudo apt-add-repository "deb https://apt.llvm.org/bionic/ llvm-toolchain-bionic${CC/#clang/} main"
          sudo apt-get update
          CC=${CC%.0}.0
          CXX=${CC/#clang/clang++}
          echo "Installing $CC $CXX"
          sudo apt-get install $CC $CXX
          echo ::set-env name=CC::$CC
          echo ::set-env name=CXX::$CXX
      - name: Checkout project
        uses: actions/checkout@v2
        with:
          lfs: true
      - name: Checkout submodules
        shell: bash
        run: |
          authHeader="$(git config --local --get http.https://github.com/.extraheader)"
          git submodule sync --recursive
          git -c "http.extraheader=$authHeader" -c protocol.version=2 submodule update --init --force --recursive --depth=1
      - name: Setup Meson + Ninja
        shell: bash
        run: |
          echo $PATH
          wget https://github.com/ninja-build/ninja/releases/download/v1.9.0/ninja-linux.zip
          sudo pip3 install --upgrade pip setuptools wheel
          pip3 install --user meson
          unzip ninja-linux.zip -d ~/.local/bin
          rm -f get-pip.py ninja-linux.zip
        working-directory: ${{ runner.temp }}
      - name: Version tools
        shell: bash
        run: |
          $CC --version
          $CXX --version
          [ $COVERAGE -ne 0 ] && $GCOV --version || true
          meson --version
          ninja --version
      - name: Install dependencies
        shell: bash
        run: >
          sudo apt-get install libopenal-dev libogg-dev libvorbis-dev libopus-dev libopusfile-dev
          libflac-dev libwavpack-dev libmpcdec-dev libfaac-dev libfaad-dev libmad0-dev libid3tag0-dev
      - name: Configure
        run: meson build --prefix=$HOME/.local -Db_coverage=${{ matrix.coverage }}
      - name: Build
        run: ninja
        working-directory: ${{ env.GITHUB_WORKSPACE }}/build
      - name: Test
        run: ninja test
        working-directory: ${{ env.GITHUB_WORKSPACE }}/build
      - name: Install
        run: ninja install
        working-directory: ${{ env.GITHUB_WORKSPACE }}/build

#  build-windows:
#    runs-on: ${{matrix.os}}
#    strategy:
#      matrix:
#        os: [windows-2019, windows-2016]
