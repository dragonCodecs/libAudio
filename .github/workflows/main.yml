name: C++ CI

on:
  push:
  schedule:
    - cron: "0 0 1 * *"

jobs:
  build-linux:
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        compiler:
          - 'clang-5.0'
          - 'clang-6.0'
          - 'clang-7'
          - 'clang-8'
          - 'clang-9'
          - 'gcc-5'
          - 'gcc-6'
          - 'gcc-7'
          - 'gcc-8'
          - 'gcc-9'
        coverage: [false]
      fail-fast: false
    steps:
      - name: Runtime environment
        shell: bash
        env:
          WORKSPACE: ${{ github.workspace }}
        run: |
          echo ::set-env name=PATH::"$HOME/.local/bin:$PATH"
          echo ::set-env name=GITHUB_WORKSPACE::"`pwd`"
      - name: Coverage environment
        env:
          COVERAGE: ${{ matrix.coverage }}
        run: |
          echo "Coverage enabled for build? ${{ matrix.coverage }}"
          echo ::set-env name=COVERAGE::$([ $COVERAGE == "true" ] && echo -n 1 || echo -n 0)
      - name: Setup GCC
        if: startsWith(matrix.compiler, 'gcc')
        shell: bash
        run: |
          CXX=${CC/#gcc/g++}
          sudo apt-add-repository ppa:ubuntu-toolchain-r/test
          sudo apt-get update
          sudo apt-get install $CC $CXX
          echo ::set-env name=CC::$CC
          echo ::set-env name=CXX::$CXX
          [ $COVERAGE -ne 0 ] && echo ::set-env name=GCOV::${CC/#gcc/gcov} || true
        env:
          CC: ${{ matrix.compiler }}
      - name: Setup Clang
        if: startsWith(matrix.compiler, 'clang')
        shell: bash
        run: |
          sudo apt-add-repository "deb https://apt.llvm.org/bionic/ llvm-toolchain-bionic${CC/#clang/} main"
          sudo apt-get update
          CXX=${CC/#clang/clang++}
          sudo apt-get install $CC $CXX
          echo ::set-env name=CC::$CC
          echo ::set-env name=CXX::$CXX
          [ $COVERAGE -ne 0 ] && echo ::set-env name=GCOV::'llvm-cov gcov' || true
        env:
          CC: ${{ matrix.compiler }}
      - name: Checkout libAudio
        uses: actions/checkout@v2
        with:
          lfs: true
      - name: Compute libmp4v2 ref
        run: echo ::set-env name=MP4V2_REF::$(git submodule status | grep deps/mp4v2 | awk '{print $1}' | tr -d '-' )
      - name: Checkout libmp4v2
        uses: actions/checkout@v2
        with:
          repository: DX-MON/mp4v2
          token: ${{ secrets.MP4V2_TOKEN }}
          path: deps/mp4v2
          ref: ${{ env.MP4V2_REF }}
          lfs: true
      - name: Setup Meson + Ninja
        shell: bash
        run: |
          wget https://github.com/ninja-build/ninja/releases/download/v1.9.0/ninja-linux.zip
          sudo pip3 install --upgrade pip setuptools wheel
          pip3 install --user meson
          unzip ninja-linux.zip -d ~/.local/bin
          rm ninja-linux.zip
        working-directory: ${{ runner.temp }}
      - name: Version tools
        shell: bash
        run: |
          $CC --version
          $CXX --version
          [ $COVERAGE -ne 0 ] && $GCOV --version || true
          meson --version
          ninja --version
      - name: Install dependencies
        shell: bash
        run: |
          sudo apt-get install libopenal-dev libogg-dev libvorbis-dev libopus-dev libopusfile-dev \
            libflac-dev libwavpack-dev libmpcdec-dev libfaac-dev libfaad-dev libmad0-dev libid3tag0-dev
      - name: Install libmp4v2
        shell: bash
        run: |
          aclocal -I . -I project
          libtoolize -icf
          automake -ac
          autoheader
          autoconf
          ./configure --prefix=/usr --libdir=/usr/lib/x86_64-linux-gnu --disable-gch
          make -j 2
          sudo make install
        working-directory: ${{ env.GITHUB_WORKSPACE }}/deps/mp4v2
      - name: Configure
        run: meson build --prefix=$HOME/.local -Db_coverage=${{ matrix.coverage }}
      - name: Build
        run: ninja
        working-directory: ${{ env.GITHUB_WORKSPACE }}/build
      - name: Test
        run: ninja test
        working-directory: ${{ env.GITHUB_WORKSPACE }}/build
      - name: Install
        run: ninja install
        working-directory: ${{ env.GITHUB_WORKSPACE }}/build

  build-windows:
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [windows-2019]
        arch: ['amd64', 'x86']
        coverage: [false]
      fail-fast: false
    env:
      CC: cl.exe
      CXX: cl.exe
      LD: link.exe
    steps:
      - name: Runtime environment
        env:
          ARCH: ${{ matrix.arch }}
        shell: cmd
        run: |
          set HOME=%HOMEDRIVE%%HOMEPATH%
          echo %HOME%\.local\bin;%PATH%
#          echo ::set-env name=PATH::"%HOME%\.local\bin;%PATH%"
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" %ARCH%
          echo ::set-env name=CommandPromptType::%CommandPromptType%
          echo ::set-env name=DevEnvDir::"%DevEnvDir%"
          echo ::set-env name=ExtensionSdkDir::"%ExtensionSdkDir%"
          echo ::set-env name=INCLUDE::"%INCLUDE%"
          echo ::set-env name=LIB::"%LIB%"
          echo ::set-env name=LIBPATH::"%LIBPATH%"
          echo ::set-env name=Platform::"%Platform%"
          echo ::set-env name=UCRTVersion::"%UCRTVersion%"
          echo ::set-env name=UniversalCRTSdkDir::"%UniversalCRTSdkDir%"
          echo ::set-env name=VCINSTALLDIR::"%VCINSTALLDIR%"
          echo ::set-env name=VCToolsInstallDir::"%VCToolsInstallDir%"
          echo ::set-env name=VCToolsRedistDir::"%VCToolsRedistDir%"
          echo ::set-env name=VCToolsVersion::"%VCToolsVersion%"
          echo ::set-env name=VisualStudioVersion::"%VisualStudioVersion%"
          echo ::set-env name=VSINSTALLDIR::"%VSINSTALLDIR%"
          echo ::set-env name=WindowsLibPath::"%WindowsLibPath%"
          echo ::set-env name=WindowsSdkBinPath::"%WindowsSdkBinPath%"
          echo ::set-env name=WindowsSdkDir::"%WindowsSdkDir%"
          echo ::set-env name=WindowsSDKLibVersion::"%WindowsSDKLibVersion%"
          echo ::set-env name=WindowsSdkVerBinPath::"%WindowsSdkVerBinPath%"
          echo ::set-env name=WindowsSDKVersion::"%WindowsSDKVersion%"
          echo ::set-env name=WindowsSDK_ExecutablePath_x64::"%WindowsSDK_ExecutablePath_x64%"
          echo ::set-env name=WindowsSDK_ExecutablePath_x86::"%WindowsSDK_ExecutablePath_x86%"
          bash --version
      - name: Coverage environment
        env:
          COVERAGE: ${{ matrix.coverage }}
        shell: bash
        run: |
          echo "Coverage enabled for build? ${{ matrix.coverage }}"
          echo ::set-env name=COVERAGE::$([ $COVERAGE == "true" ] && echo -n 1 || echo -n 0)
      - name: Checkout libAudio
        uses: actions/checkout@v2
        with:
          lfs: true
      - name: Compute libmp4v2 ref
        run: echo ::set-env name=MP4V2_REF::$(git submodule status | grep deps/mp4v2 | awk '{print $1}' | tr -d '-' )
      - name: Checkout libmp4v2
        uses: actions/checkout@v2
        with:
          repository: DX-MON/mp4v2
          token: ${{ secrets.MP4V2_TOKEN }}
          path: deps/mp4v2
          ref: ${{ env.MP4V2_REF }}
          lfs: true
      - name: Setup Meson + Ninja
        shell: bash
        run: |
          curl -L1O https://github.com/ninja-build/ninja/releases/download/v1.9.0/ninja-win.zip
          pip3 install --upgrade pip setuptools wheel
          pip3 install meson
          unzip ninja-win.zip -d /c/ProgramData/Chocolatey/bin
          rm ninja-win.zip
        working-directory: ${{ runner.temp }}
      - name: Version tools
        shell: bash
        run: |
          $CC || true
          $LD || true
          [ $COVERAGE -ne 0 ] && $GCOV --version || true
          meson --version
          ninja --version
      - name: Install dependencies
        shell: bash
        run: |
          git clone --depth 1 --no-tags https://github.com/git-for-windows/git-sdk-64
          cd git-sdk-64
          cp -a etc/pacman.{d,conf} /etc
          cp -a usr/bin/pac* usr/bin/aclocal* usr/bin/auto* usr/bin/libtool* usr/bin/msys-ltdl* \
            usr/bin/make usr/bin/m4.exe /usr/bin
          cp -a usr/share/auto* usr/share/aclocal* usr/share/libtool usr/share/pac* /usr/share
        working-directory: ${{ runner.temp }}
      - name: Install libmp4v2
        shell: bash
        run: |
          aclocal -I . -I project
          libtoolize -icf
          automake -ac
          autoheader
          autoconf
          ./configure --prefix=/usr --libdir=/usr/lib/x86_64-linux-gnu --disable-gch
          make -j 2
          sudo make install
        working-directory: ${{ github.workspace }}/deps/mp4v2
      - name: Configure
        shell: cmd
        run: |
          cl
          meson build --prefix=%HOME%/.local -Db_coverage=${{ matrix.coverage }}
      - name: Build
        run: ninja
        working-directory: ${{ github.workspace }}/build
      - name: Test
        run: ninja test
        working-directory: ${{ github.workspace }}/build
      - name: Install
        run: ninja install
        working-directory: ${{ github.workspace }}/build
