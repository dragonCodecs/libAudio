name: Build Linux

on:
  push:
    branches-ignore:
      - 'coverityScan'
  pull_request:
    branches:
      - 'main'

concurrency:
  group: ${{ github.workflow }}-${{ github.job }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-linux:
    name: '${{ matrix.os.id }} (${{ matrix.compiler }})'
    runs-on: ${{ matrix.os.id }}
    defaults:
      run:
        shell: bash
    strategy:
      matrix:
        os:
          - { id: ubuntu-20.04, name: focal }
          - { id: ubuntu-22.04, name: jammy }
        compiler:
          - 'gcc'
          - 'clang'
      fail-fast: false
    steps:
      - name: Runtime environment
        env:
          WORKSPACE: ${{ github.workspace }}
        run: |
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          echo "GITHUB_WORKSPACE=`pwd`" >> $GITHUB_ENV
      - name: Setup GCC
        if: startsWith(matrix.compiler, 'gcc')
        run: |
          CXX=${CC/#gcc/g++}
          sudo apt-get update
          sudo apt-get install $CC $CXX gcovr
          echo "CC=$CC" >> $GITHUB_ENV
          echo "CXX=$CXX" >> $GITHUB_ENV
          echo "GCOV=${CC/#gcc/gcov}" >> $GITHUB_ENV
        env:
          CC: ${{ matrix.compiler }}
      - name: Setup Clang
        if: startsWith(matrix.compiler, 'clang')
        run: |
          sudo apt-get update
          sudo apt-get install $CC llvm gcovr
          CXX=${CC/#clang/clang++}
          echo "CC=$CC" >> $GITHUB_ENV
          echo "CXX=$CXX" >> $GITHUB_ENV
          echo "GCOV=/usr/bin/llvm-cov gcov" >> $GITHUB_ENV
        env:
          CC: ${{ matrix.compiler }}
        working-directory: ${{ runner.temp }}
      - name: Checkout libAudio
        uses: actions/checkout@v3
        with:
          lfs: true
      - name: Compute libmp4v2 ref
        run: echo "MP4V2_REF=$(git submodule status | grep deps/mp4v2 | awk '{print $1}' | tr -d '-' )" >> $GITHUB_ENV
      - name: Checkout libmp4v2
        if: github.repository == 'dragonmux/libAudio'
        uses: actions/checkout@v3
        with:
          repository: dragonmux/mp4v2
          token: ${{ secrets.MP4V2_TOKEN }}
          path: deps/mp4v2
          ref: ${{ env.MP4V2_REF }}
          lfs: true
      - name: Checkout crunch
        uses: actions/checkout@v3
        with:
          repository: dragonmux/crunch
          path: deps/crunch
          #ref: TODO: need to feed what version of crunch to use in here..
          lfs: true
          submodules: true
      - name: Setup Meson + Ninja
        run: |
          sudo python3 -m pip install --upgrade pip setuptools wheel
          sudo python3 -m pip install meson ninja
        working-directory: ${{ runner.temp }}
      - name: Version tools
        run: |
          $CC --version
          $CXX --version
          $GCOV --version
          meson --version
          ninja --version
      - name: Install dependencies
        shell: bash
        run: |
          sudo apt-get install libopenal-dev libogg-dev libvorbis-dev libopus-dev libopusfile-dev \
            libflac-dev libwavpack-dev libmpcdec-dev libfaac-dev libfaad-dev libmad0-dev libid3tag0-dev
        #  libgl-dev qtbase5-dev
      - name: Install libmp4v2
        if: github.repository == 'dragonmux/libAudio'
        shell: bash
        run: |
          meson build --prefix=/usr
          meson compile -C build
          sudo meson install -C build
        working-directory: ${{ env.GITHUB_WORKSPACE }}/deps/mp4v2
      - name: Install crunch
        shell: bash
        run: |
          meson build --prefix=/usr $BUILD_OPTS
          meson compile -C build
          sudo meson install -C build
        working-directory: ${{ env.GITHUB_WORKSPACE }}/deps/crunch
      - name: Configure
        run: meson setup build --prefix=$HOME/.local
      - name: Build
        run: meson compile -C build
      - name: Test
        run: meson test -C build
      - name: Install
        run: meson install -C build
      - name: Run coverage build
        if: success() && github.repository == 'dragonmux/libAudio'
        # Codecov no longer parses gcov files automatically
        run: |
          rm -rf build
          meson setup build --prefix=$HOME/.local -Db_coverage=true --buildtype=debug
          meson compile -C build
          meson test -C build
          cd build
          find . -type f -name '*.gcda' -exec $GCOV -p {} + > /dev/null
          gcovr -r .. -x -o coverage.xml --gcov-executable "$GCOV" -e ../deps -e ../test
      - name: Codecov
        if: success() && github.repository == 'dragonmux/libAudio'
        uses: codecov/codecov-action@v3
