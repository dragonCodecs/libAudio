name: Build Windows

on:
  push:
    branches-ignore:
      - 'coverityScan'
  pull_request:
    branches:
      - 'main'

concurrency:
  group: ${{ github.workflow }}-${{ github.job }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-windows-msvc:
    name: '${{ matrix.os }} (msvc ${{ matrix.arch }})'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: 
          - windows-2019
          - windows-2022
        arch: 
          - 'amd64'
          - 'x86'
      fail-fast: false
    steps:
      - name: Runtime environment
        shell: bash
        env:
          WORKSPACE: ${{ github.workspace }}
        run: |
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          echo "GITHUB_WORKSPACE=`pwd`" >> $GITHUB_ENV
      - name: Coverage environment
        if: github.repository == 'dragonmux/libAudio'
        run: |
          echo "COVERAGE=1" >> $GITHUB_ENV
          echo "BUILD_OPTS=-Db_coverage=true --buildtype=debug -Db_lto=false" >> $GITHUB_ENV
      - name: Checkout libAudio
        uses: actions/checkout@v3
        with:
          lfs: true
      - name: Runtime environment
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.arch }}
      - name: Set pkg-config up
        shell: cmd
        run: |
          mkdir %HOME%\deps
          echo "PKG_CONFIG_PATH=\"%HOME%\\deps\\lib\\pkgconfig\"" >> $GITHUB_ENV
      - name: Setup OpenCppCoverage
        if: github.repository == 'dragonmux/libAudio'
        shell: bash
        run: |
          curl -L1O https://github.com/OpenCppCoverage/OpenCppCoverage/releases/download/release-0.9.9.0/OpenCppCoverageSetup-x64-0.9.9.0.exe
          MSYS2_ARG_CONV_EXCL=/dir=\;/verysilent ./OpenCppCoverageSetup-x64-0.9.9.0 \
            /dir="C:\Program Files\OpenCppCoverage" /verysilent
          rm OpenCppCoverageSetup-x64-0.9.9.0.exe
      - name: Install MSYS2 shell
        uses: msys2/setup-msys2@v2
        with:
          update: true
          msystem: UCRT64
          path-type: inherit
          install: >-
            base-devel
            autotools
      - name: Checkout public deps
        shell: bash
        run: |
          git submodule init deps/substrate deps/ogg deps/vorbis deps/opus deps/opusfile deps/flac deps/WavPack deps/faac deps/faad2 deps/libmad deps/zlib deps/libid3tag
          git submodule update --depth 1
      - name: Compute libmp4v2 ref
        shell: bash
        run: echo "MP4V2_REF=$(git submodule status | grep deps/mp4v2 | awk '{print $1}' | tr -d '-' )" >> $GITHUB_ENV
      - name: Checkout libmp4v2
        if: github.repository == 'dragonmux/libAudio'
        uses: actions/checkout@v3
        with:
          repository: dragonmux/mp4v2
          token: ${{ secrets.MP4V2_TOKEN }}
          path: deps/mp4v2
          ref: ${{ env.MP4V2_REF }}
          lfs: true
      - name: Checkout libcuefile
        if: github.repository == 'dragonmux/libAudio'
        uses: actions/checkout@v3
        with:
          repository: dragonmux/libcuefile
          token: ${{ secrets.MPC_TOKEN }}
          path: deps/libcuefile
          lfs: true
      - name: Checkout libreplaygain
        if: github.repository == 'dragonmux/libAudio'
        uses: actions/checkout@v3
        with:
          repository: dragonmux/libreplaygain
          token: ${{ secrets.MPC_TOKEN }}
          path: deps/libreplaygain
          lfs: true
      - name: Checkout MusePack
        if: github.repository == 'dragonmux/libAudio'
        uses: actions/checkout@v3
        with:
          repository: dragonmux/libmpc
          token: ${{ secrets.MPC_TOKEN }}
          path: deps/libmpc
          lfs: true
      - name: Setup Meson + Ninja
        shell: bash
        run: |
          python3 -m pip install --upgrade pip setuptools wheel
          python3 -m pip install meson ninja
        working-directory: ${{ runner.temp }}
      - name: Version tools
        shell: bash
        run: |
          $CC || true
          $LD || true
          if [ ! -z "$COVERAGE" ]; then echo $GCOV --version; fi
          meson --version
          ninja --version
        working-directory: ${{ runner.temp }}
      - name: Install libogg
        shell: msys2 {0}
        run: |
          libtoolize -icf
          aclocal -I m4
          autoheader
          automake -ac
          autoconf
          CC=cl LD=link AR=ar CFLAGS="-O2 -Ob2 -Oi" ./configure --prefix=$HOME/deps
          make -j $CPU_COUNT
          make install
        working-directory: ${{ github.workspace }}/deps/ogg
      - name: Install libvorbis
        shell: msys2 {0}
        run: |
          libtoolize -icf
          aclocal -I .
          autoheader
          automake -ac
          autoconf
          CC=cl LD=link AR=ar CFLAGS="-O2 -Ob2 -Oi" ./configure --prefix=$HOME/deps
          make -j $CPU_COUNT
          make install
        working-directory: ${{ github.workspace }}/deps/vorbis
      - name: Install libopus
        shell: bash
        run: |
          mkdir -p build
          cd build
          cmake .. -DCMAKE_INSTALL_PREFIX:PATH=$HOME/deps -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -G Ninja
          ninja
          ninja install
        working-directory: ${{ github.workspace }}/deps/opus
      - name: Install libopusfile
        shell: msys2 {0}
        run: |
          libtoolize -icf
          aclocal -I m4
          autoheader
          automake -ac
          autoconf
          CC=cl LD=link AR=ar CFLAGS="-O2 -Ob2 -Oi" ./configure --prefix=$HOME/deps --disable-examples
          make -j $CPU_COUNT
          make install
        working-directory: ${{ github.workspace }}/deps/opus
      - name: Install libflac
        shell: bash
        run: |
          mkdir -p build
          cd build
          cmake .. -DCMAKE_INSTALL_PREFIX:PATH=$HOME/deps -DCMAKE_BUILD_TYPE:STRING=Release \
            -DBUILD_SHARED_LIBS:BOOL=ON -G Ninja
          ninja
          ninja install
          mv $HOME/deps/{share/pkgconfig/flac*.pc,lib/pkgconfig}
          rm -rf $HOME/deps/share
        working-directory: ${{ github.workspace }}/deps/flac
      - name: Install WavPack
        shell: bash
        run: |
          mkdir -p build
          cd build
          cmake .. -DCMAKE_INSTALL_PREFIX:PATH=$HOME/deps -DCMAKE_BUILD_TYPE:STRING=Release -DWAVPACK_BUILD_WINAMP_PLUGIN:BOOL=OFF -DBUILD_SHARED_LIBS:BOOL=ON -DWAVPACK_BUILD_COOLEDIT_PLUGIN:BOOL=OFF -G Ninja
          ninja
          ninja install
        working-directory: ${{ github.workspace }}/deps/WavPack
      - name: Install libcuefile
        if: github.repository == 'dragonmux/libAudio'
        shell: bash
        run: |
          mkdir -p build
          cd build
          cmake .. -DCMAKE_INSTALL_PREFIX:PATH=$HOME/deps -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -G Ninja
          ninja
          ninja install
        env:
          CFLAGS: "-D_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES=1 -D_CRT_NONSTDC_NO_WARNINGS=1 -D_CRT_SECURE_NO_WARNINGS=1"
        working-directory: ${{ github.workspace }}/deps/libcuefile
      - name: Install libreplaygain
        if: github.repository == 'dragonmux/libAudio'
        shell: bash
        run: |
          mkdir -p build
          cd build
          cmake .. -DCMAKE_INSTALL_PREFIX:PATH=$HOME/deps -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -G Ninja
          ninja
          ninja install
        working-directory: ${{ github.workspace }}/deps/libreplaygain
      - name: Install MusePack
        if: github.repository == 'dragonmux/libAudio'
        shell: bash
        run: |
          meson build --prefix=$HOME/deps
          ninja -C build
          ninja -C build install
        working-directory: ${{ github.workspace }}/deps/libmpc
      - name: Install faac
        # We override the generator with vcpkg. It's cheaper.
        run: |
          curl -O -L https://raw.githubusercontent.com/oddlf/libzplay/a2de0bb77560c2880d4be2ac847be2d471543907/vcpkg-ports/faac/CMakeLists.txt
          mkdir -p build
          cd build
          cmake .. -DCMAKE_INSTALL_PREFIX:PATH=$HOME/deps -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -G Ninja
          ninja
          ninja install
        env:
          CFLAGS: "-I${{ github.workspace }}\\deps\\faac\\project\\msvc -DHAVE_GETOPT_H"
        working-directory: ${{ github.workspace }}/deps/faac
      - name: Install faad2
        shell: bash
        # We override the generator with vcpkg. It's cheaper.
        run: |
          curl -O -L https://github.com/microsoft/vcpkg/raw/ffe7360e0f5ba62f98b620575294ecb9d8a02980/ports/faad2/CMakeLists.txt
          mkdir -p build
          cd build
          cmake .. -DCMAKE_INSTALL_PREFIX:PATH=$HOME/deps -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -G Ninja
          ninja
          ninja install
        working-directory: ${{ github.workspace }}/deps/faad2
      - name: Install libmp4v2
        if: github.repository == 'dragonmux/libAudio'
        shell: bash
        run: |
          meson build --prefix=$HOME/deps --warnlevel=1
          meson compile -C build
          meson install -C build
        working-directory: ${{ github.workspace }}/deps/mp4v2
      - name: Install libmad
        shell: bash
        # We override the generator with vcpkg. It's cheaper.
        run: |
          curl -O -L 
          https://github.com/microsoft/vcpkg/raw/ffe7360e0f5ba62f98b620575294ecb9d8a02980/ports/libmad/CMakeLists.txt
          mkdir -p build
          cd build
          cmake .. -DCMAKE_INSTALL_PREFIX:PATH=$HOME/deps -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -G Ninja
          ninja
          ninja install
        working-directory: ${{ github.workspace }}/deps/libmad
      - name: Install zlib
        shell: msys2 {0}
        run: |
          nmake -f win32/Makefile.msc
          cp zlib1.dll $HOME/deps/bin
          cp zdll.lib $HOME/deps/lib
          cp $HOME/deps/lib/z{dll,}.lib
          cp zconf.h zlib.h $HOME/deps/include
        working-directory: ${{ github.workspace }}/deps/zlib
      - name: Install libid3tag
        shell: msys2 {0}
        run: |
          touch NEWS AUTHORS ChangeLog
          WANT_AUTOMAKE=latest libtoolize -icf
          WANT_AUTOMAKE=latest aclocal -I . -I m4
          autoheader
          WANT_AUTOMAKE=latest automake -ac
          autoconf
          CC=cl LD=link AR=ar CFLAGS="-O2 -Ob2 -Oi -I${{ github.workspace }}/deps/libid3tag/msvc++" \
            LDFLAGS="-no-undefined -MD" ./configure --prefix=$HOME/deps --disable-shared --enable-static
          make -j $CPU_COUNT
          make install
        working-directory: ${{ github.workspace }}/deps/libid3tag
      - name: Configure
        shell: cmd
        run: |
          meson build --prefix=%HOME%/.local $BUILD_OPTS -Dcpp_link_args="-lz"
      - name: Build
        run: meson compile -C build
      - name: Test
        run: meson test -C build
      - name: Install
        run: meson install -C build
      - name: Codecov
        if: success() && github.repository == 'dragonmux/libAudio'
        uses: codecov/codecov-action@v3
