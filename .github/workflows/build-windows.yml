name: Build Windows

on:
  push:
    branches-ignore:
      - 'coverityScan'
  pull_request:
    branches:
      - 'main'

concurrency:
  group: ${{ github.workflow }}-${{ github.job }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-windows:
    name: '${{ matrix.os }} (msvc ${{ matrix.arch }})'
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: pwsh
    strategy:
      matrix:
        os:
          - windows-2019
        arch: 
          - 'amd64'
          - 'x86'
      fail-fast: false
    steps:
      - name: Runtime environment
        env:
          WORKSPACE: ${{ github.workspace }}
        run: |
          echo "$HOME\\.local\\bin" >> $GITHUB_PATH
          echo "GITHUB_WORKSPACE=$(pwd)" >> $GITHUB_ENV
      - name: Setup compiler
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x86_64
      - name: Install OpenCppCoverage
        if: github.repository == 'dragonmux/libAudio'
        uses: crazy-max/ghaction-chocolatey@v2.1.0
        with:
          args: install OpenCppCoverage
      - name: Setup OpenCppCoverage
        if: github.repository == 'dragonmux/libAudio'
        run: |
          echo "C:\Program Files\OpenCppCoverage" >> $GITHUB_PATH
      - name: Checkout libAudio
        uses: actions/checkout@v3
        with:
          lfs: true
      - name: Checkout public deps
        shell: bash
        run: |
          git submodule init deps/opus deps/opusfile deps/WavPack deps/faac deps/faad2 deps/libmad deps/libid3tag
          git submodule update --depth 1
      - name: Compute libmp4v2 ref
        shell: bash
        run: echo "MP4V2_REF=$(git submodule status | grep deps/mp4v2 | awk '{print $1}' | tr -d '-' )" >> $GITHUB_ENV
      - name: Checkout libmp4v2
        if: github.repository == 'dragonmux/libAudio'
        uses: actions/checkout@v3
        with:
          repository: dragonmux/mp4v2
          token: ${{ secrets.MP4V2_TOKEN }}
          path: deps/mp4v2
          ref: ${{ env.MP4V2_REF }}
          lfs: true
      - name: Checkout libcuefile
        if: github.repository == 'dragonmux/libAudio'
        uses: actions/checkout@v3
        with:
          repository: dragonmux/libcuefile
          token: ${{ secrets.MPC_TOKEN }}
          path: deps/libcuefile
          lfs: true
      - name: Checkout libreplaygain
        if: github.repository == 'dragonmux/libAudio'
        uses: actions/checkout@v3
        with:
          repository: dragonmux/libreplaygain
          token: ${{ secrets.MPC_TOKEN }}
          path: deps/libreplaygain
          lfs: true
      - name: Checkout MusePack
        if: github.repository == 'dragonmux/libAudio'
        uses: actions/checkout@v3
        with:
          repository: dragonmux/libmpc
          token: ${{ secrets.MPC_TOKEN }}
          path: deps/libmpc
          lfs: true
      - name: Setup Meson + Ninja
        run: |
          python3 -m pip install --upgrade pip setuptools wheel
          python3 -m pip install meson ninja
        working-directory: ${{ runner.temp }}
      - name: Version tools
        run: |
          cl /Bv
          link
          cmake --version
          meson --version
          ninja --version
      - name: Install libopus
        run: |
          New-Item build -ItemType Directory -Force
          cd build
          cmake .. -DCMAKE_INSTALL_PREFIX:PATH=$HOME/deps -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -G Ninja
          cmake --build . --target install --parallel
        working-directory: ${{ github.workspace }}/deps/opus
      - name: Install libopusfile
        run: |
          New-Item build -ItemType Directory -Force
          cd build
          cmake .. -DCMAKE_INSTALL_PREFIX:PATH=$HOME/deps -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DOP_DISABLE_EXAMPLES:BOOL=OFF -DOP_DISABLE_DOCS:BOOL=OFF -G Ninja
          cmake --build . --target install --parallel
        working-directory: ${{ github.workspace }}/deps/opus
      - name: Install WavPack
        run: |
          New-Item build -ItemType Directory -Force
          cd build
          cmake .. -DCMAKE_INSTALL_PREFIX:PATH=$HOME/deps -DCMAKE_BUILD_TYPE:STRING=Release -DWAVPACK_BUILD_WINAMP_PLUGIN:BOOL=OFF -DBUILD_SHARED_LIBS:BOOL=ON -DWAVPACK_BUILD_COOLEDIT_PLUGIN:BOOL=OFF -G Ninja
          cmake --build . --target install --parallel
        working-directory: ${{ github.workspace }}/deps/WavPack
      - name: Install libcuefile
        if: github.repository == 'dragonmux/libAudio'
        run: |
          New-Item build -ItemType Directory -Force
          cd build
          cmake .. -DCMAKE_INSTALL_PREFIX:PATH=$HOME/deps -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -G Ninja
          cmake --build . --target install --parallel
        env:
          CFLAGS: "-D_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES=1 -D_CRT_NONSTDC_NO_WARNINGS=1 -D_CRT_SECURE_NO_WARNINGS=1"
        working-directory: ${{ github.workspace }}/deps/libcuefile
      - name: Install libreplaygain
        if: github.repository == 'dragonmux/libAudio'
        run: |
          New-Item build -ItemType Directory -Force
          cd build
          cmake .. -DCMAKE_INSTALL_PREFIX:PATH=$HOME/deps -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -G Ninja
          cmake --build . --target install --parallel
        working-directory: ${{ github.workspace }}/deps/libreplaygain
      - name: Install MusePack
        if: github.repository == 'dragonmux/libAudio'
        run: |
          meson setup build --prefix=$HOME/deps
          meson compile -C build
          meson install -C build
        working-directory: ${{ github.workspace }}/deps/libmpc
      - name: Install faac
        # We override the generator with vcpkg. It's cheaper.
        run: |
          curl -O -L https://raw.githubusercontent.com/oddlf/libzplay/a2de0bb77560c2880d4be2ac847be2d471543907/vcpkg-ports/faac/CMakeLists.txt
          New-Item build -ItemType Directory -Force
          cd build
          cmake .. -DCMAKE_INSTALL_PREFIX:PATH=$HOME/deps -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -G Ninja
          cmake --build . --target install --parallel
        env:
          CFLAGS: "-I${{ github.workspace }}\\deps\\faac\\project\\msvc -DHAVE_GETOPT_H"
        working-directory: ${{ github.workspace }}/deps/faac
      - name: Install faad2
        # We override the generator with vcpkg. It's cheaper.
        run: |
          curl -O -L https://github.com/microsoft/vcpkg/raw/ffe7360e0f5ba62f98b620575294ecb9d8a02980/ports/faad2/CMakeLists.txt
          New-Item build -ItemType Directory -Force
          cd build
          cmake .. -DCMAKE_INSTALL_PREFIX:PATH=$HOME/deps -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -G Ninja
          cmake --build . --target install --parallel
        working-directory: ${{ github.workspace }}/deps/faad2
      - name: Install libmp4v2
        if: github.repository == 'dragonmux/libAudio'
        run: |
          meson setup build --prefix=$HOME/deps --warnlevel=1
          meson compile -C build
          meson install -C build
        working-directory: ${{ github.workspace }}/deps/mp4v2
      - name: Install libmad
        run: |
          New-Item build -ItemType Directory -Force
          cd build
          cmake .. -DCMAKE_INSTALL_PREFIX:PATH=$HOME/deps -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -G Ninja
          cmake --build . --target install --parallel
        working-directory: ${{ github.workspace }}/deps/libmad
      - name: Install libid3tag
        run: |
          New-Item build -ItemType Directory -Force
          cd build
          cmake .. -DCMAKE_INSTALL_PREFIX:PATH=$HOME/deps -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -G Ninja
          cmake --build . --target install --parallel
        working-directory: ${{ github.workspace }}/deps/libid3tag
      - name: Configure
        run: meson setup build --prefix=$HOME/.local
      - name: Build
        run: meson compile -C build
      - name: Test
        run: meson test -C build
      - name: Install
        run: meson install -C build
      - name: Run coverage build
        if: github.repository == 'dragonmux/libAudio'
        run: |
          Remove-Item -Recurse build
          meson setup build --prefix=$HOME/.local -Db_coverage=true --buildtype=debug
          meson compile -C build
          meson test -C build
      - name: Codecov
        if: success() && github.repository == 'dragonmux/libAudio'
        uses: codecov/codecov-action@v3
