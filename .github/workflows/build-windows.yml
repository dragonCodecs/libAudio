name: Build Windows

on:
  push:
    branches-ignore:
      - 'coverityScan'
  pull_request:
    branches:
      - 'main'

concurrency:
  group: ${{ github.workflow }}-${{ github.job }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-windows:
    name: '${{ matrix.os }} (msvc ${{ matrix.arch }})'
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: pwsh
    strategy:
      matrix:
        os:
          # windows-2019 is incompatible with substrate's constexpr array
          # see https://developercommunity.visualstudio.com/t/Crash-on-constexpr-creation-of-a-std::ar/1547919
          - windows-2022
        arch: 
          - 'amd64'
          # - 'x86'
      fail-fast: false
    steps:
      - name: Runtime environment
        env:
          WORKSPACE: ${{ github.workspace }}
        run: |
          Add-Content $env:GITHUB_PATH "$HOME/.local/bin"
          "GITHUB_WORKSPACE=$(pwd)" >> $env:GITHUB_ENV
          "PKG_CONFIG_PATH=$HOME/deps/lib/pkgconfig,$HOME/deps/share/pkgconfig" >> $env:GITHUB_ENV
          "CMAKE_PREFIX_PATH=$HOME/deps" >> $env:GITHUB_ENV
          "PKG_CONFIG_ALLOW_SYSTEM_CFLAGS=1" >> $env:GITHUB_ENV
      - name: Setup compiler
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x86_64
      - name: Install OpenCppCoverage
        if: github.repository == 'dragonCodecs/libAudio'
        uses: crazy-max/ghaction-chocolatey@v2.1.0
        with:
          args: install OpenCppCoverage
      - name: Setup OpenCppCoverage
        if: github.repository == 'dragonCodecs/libAudio'
        run: |
          echo "C:\Program Files\OpenCppCoverage" >> $GITHUB_PATH
      - name: Checkout libAudio
        uses: actions/checkout@v3
        with:
          lfs: true
      - name: Checkout public deps
        shell: bash
        run: |
          git submodule init deps/pkgconf deps/opus deps/openal-soft
          git submodule update --depth 1
      - name: Setup Meson + Ninja
        run: |
          python3 -m pip install --upgrade pip setuptools wheel
          python3 -m pip install meson ninja
        working-directory: ${{ runner.temp }}
      - name: Setup pkgconf
        run: |
          meson setup build --prefix=$HOME/.local -Dtests=disabled
          meson compile -C build
          meson install -C build
          "PKG_CONFIG=$(where.exe pkgconf.exe)" >> $env:GITHUB_ENV
          Remove-Item $(where.exe pkg-config.bat)
          Remove-Item $(where.exe pkg-config)
        working-directory:  ${{ github.workspace }}/deps/pkgconf
      - name: Version tools
        run: |
          cl /Bv
          link
          cmake --version
          meson --version
          ninja --version
          & "$env:PKG_CONFIG" --version
      - name: Install libopus
        run: |
          New-Item build -ItemType Directory -Force
          cd build
          cmake .. -DCMAKE_INSTALL_PREFIX:PATH=$HOME/deps -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -G Ninja
          cmake --build . --target install --parallel
        working-directory: ${{ github.workspace }}/deps/opus
      - name: Configure
        run: meson setup build --prefix=$HOME/.local
      - name: Build
        run: meson compile -C build
      - name: Test
        run: meson test -C build
      - name: Install
        run: meson install -C build
      - name: Run coverage build
        if: github.repository == 'dragonCodecs/libAudio'
        run: |
          Remove-Item -Recurse build
          Remove-Item deps/libcuefile.wrap
          Remove-Item deps/libreplaygain.wrap
          meson setup build --prefix=$HOME/.local -Db_coverage=true --buildtype=debug
          meson compile -C build
          meson test -C build
      - name: Codecov
        if: success() && github.repository == 'dragonCodecs/libAudio'
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
